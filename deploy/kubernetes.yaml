apiVersion: apps/v1
kind: Deployment
metadata:
  name: ssl-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ssl-proxy
  template:
    metadata:
      labels:
        app: ssl-proxy
        prometheus.io/probe: "true"
    spec:
      containers:
        - name: squid
          image: squid:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3128
          volumeMounts:
            - name: squid-config
              mountPath: /etc/squid/squid.conf
              subPath: squid.conf
            - name: ca-certs
              mountPath: /etc/squid/ca_cert
          args: ["-f", "/etc/squid/squid.conf"]
        - name: metrics-exporter
          image: boynux/squid-exporter
          ports:
            - containerPort: 8080
          args:
            - "-squid-hostname"
            - "localhost"
            - "-squid-port"
            - "3128"
            - "-listen"
            - ":8080"
        - name: envoy
          image: envoyproxy/envoy:v1.29.1
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3129
          volumeMounts:
            - name: envoy-config
              mountPath: /etc/envoy
            - name: ca-certs
              mountPath: /etc/ssl/ca-certs
            - name: server-certs
              mountPath: /etc/ssl/certs
          command: ["envoy"]
          args: ["-c", "/etc/envoy/envoy.yaml"]
        - name: icap-server
          image: icap-server:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 1344
          env:
            - name: GITHUB_TOKEN
              value: "REPLACE_ME"
      volumes:
        - name: squid-config
          configMap:
            name: squid-configmap
        - name: envoy-config
          configMap:
            name: envoy-configmap
        - name: ca-certs
          configMap:
            name: ca-certs
        - name: server-certs
          configMap:
            name: server-certs

---

apiVersion: v1
kind: Service
metadata:
  name: squid
  labels:
    prometheus.io/probe: "true"
spec:
  selector:
    app: squid
  ports:
    - name: metrics
      protocol: TCP
      port: 8080
      targetPort: 8080
    - name: proxy
      protocol: TCP
      port: 3129
      targetPort: 3129

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: squid-configmap
data:
  squid.conf: |
    http_port 127.0.0.1:3128 ssl-bump generate-host-certificates=on \
                                      dynamic_cert_mem_cache_size=4MB \
                                      tls-cert=/etc/squid/ca_cert/ca.crt \
                                      tls-key=/etc/squid/ca_cert/ca.key \
                                      tls-cafile=/etc/squid/ca_cert/ca.crt

    logformat combinedjson { "message": "%ts.%03tu %6tr %>a %Ss/%03>Hs %<st %"rm %"ru %"un %Sh/%<a %mt", "httpRequest": { "requestMethod": "%"rm", "requestUrl": "%"ru", "requestSize": "%>st", "status": "%>Hs", "responseSize": "%<st", "userAgent": "%"{User-Agent}>h", "remoteIp": "%"{X-Real-IP}>h", "serverIp": "%<a", "latency": "%<ttms", "protocol": "HTTP/%rv" }, "client_device_serial": "%"un", "request_status": "%Ss", "hierarchy_status": "%Sh" }
    access_log /var/log/squid/access.log combinedjson

    # Launch the auth processes that will be used to handle the user auth flow
    # In this case, the auth process always returns "OK" as all we care about is
    # knowing the identity of the caller rather than actually setting up a allow/deny list of users.
    auth_param basic program /sbin/null-auth.sh
    auth_param basic children 5 startup=5 idle=1
    auth_param basic credentialsttl 5 hours
    auth_param basic casesensitive on
    auth_param basic realm proxy

    acl ssl_ports port 443
    acl safe_ports port 443
    acl CONNECT method CONNECT
    acl authenticatedusers proxy_auth REQUIRED

    http_access deny !authenticatedusers
    http_access deny !safe_ports
    http_access deny CONNECT !ssl_ports

    http_access allow authenticatedusers
    http_access allow manager all
    http_access allow all

    # Don't perform any caching whatsoever
    cache deny all

    # Bump all connections.
    # Stare at step 1 to validate SSL/CONNECT request before bumping.
    acl step1 at_step SslBump1
    # Peek: Squid forward's the client hello to the upstream server intact
    # Stare: Squid sends IT'S hello to the upstream server
    # We choose stare here because we always intend to bump (not splice)
    ssl_bump stare step1
    ssl_bump bump all

    sslcrtd_program /usr/lib/squid/security_file_certgen -s /var/lib/squid/ssl_db -M 4MB
    sslcrtd_children 5

    # Enable an ICAP server which can perform content adaptation on all requests
    icap_enable          on
    icap_service auditor reqmod_precache icap://127.0.0.1:1344/ bypass=off
    # Use a custom HTTP header for passing the client identity on
    icap_client_username_header Client-Identity
    adaptation_send_username on
    # Don't forward CONNECT requests to the ICAP server
    adaptation_access auditor deny CONNECT
    adaptation_access auditor allow all

    debug_options ALL,1

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-configmap
data:
  envoy.yaml: |
    # https://github.com/envoyproxy/envoy/blob/66e6ce82a2125809667500ea3a056c19bca8fe7c/configs/proxy_connect.yaml
    static_resources:
      listeners:
        - name: listener
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 3129
          filter_chains:
            - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  stat_prefix: ingress_https
                  route_config:
                    name: local_route
                    virtual_hosts:
                    - name: local_service
                      domains: ["*"]
                      routes:
                      - match:
                          connect_matcher: {}
                        route:
                          cluster: squid
                  http_filters:
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
                      inline_code: |
                        -- this function converts a string to base64
                        function to_base64(data)
                            local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
                            return ((data:gsub('.', function(x)
                                local r,b='',x:byte()
                                for i=8,1,-1 do r=r..(b%2^i-b%2^(i-1)>0 and '1' or '0') end
                                return r;
                            end)..'0000'):gsub('%d%d%d?%d?%d?%d?', function(x)
                                if (#x < 6) then return '' end
                                local c=0
                                for i=1,6 do c=c+(x:sub(i,i)=='1' and 2^(6-i) or 0) end
                                return b:sub(c+1,c+1)
                            end)..({ '', '==', '=' })[#data%3+1])
                        end

                        function envoy_on_request(request_handle)
                          local san = request_handle:streamInfo():downstreamSslConnection():dnsSansPeerCertificate()
                          username = san[1]
                          static_password = "automatic"
                          username_password = username .. ":" .. static_password
                          request_handle:headers():add("Proxy-Authorization", "Basic " .. to_base64(username_password))
                        end
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                  http2_protocol_options:
                    allow_connect: true
                  upgrade_configs:
                  - upgrade_type: CONNECT
              transport_socket:
                name: envoy.transport_sockets.tls
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
                  require_client_certificate: true
                  common_tls_context:
                    tls_certificates:
                    - certificate_chain:
                        filename: /etc/ssl/certs/server.crt
                      private_key:
                        filename: /etc/ssl/certs/server.key
                    validation_context:
                      trusted_ca: { filename: "/etc/ssl/ca-certs/ca.crt" }
                      allow_expired_certificate: false
      clusters:
        - name: squid
          connect_timeout: 0.25s
          type: STATIC
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: squid
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 127.0.0.1
                          port_value: 3128
